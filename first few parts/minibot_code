

//**********************************//
//* Sound Reversing Code           *//
//* for Minibot                    *//
//*                                *//
//* UoN 2019 - DF                  *//
//**********************************//

// name the motor control pins
#define MRf 5
#define MRb 7
#define MLf 8
#define MLb 6

//bumper pins
#define left 2
#define right 3

// name the microphone pin
#define MIC A6

// define a limit value
#define LIMIT 1023

// define buzzer
#define buzzer 9


void setup() {
  // configure the motor control pins as outputs
  pinMode(MRf, OUTPUT);
  pinMode(MRb, OUTPUT);
  pinMode(MLf, OUTPUT);
  pinMode(MLb, OUTPUT);

  //set bumbers
  pinMode(left, INPUT_PULLUP);
  pinMode(right, INPUT_PULLUP);

  //configure buzzer
  pinMode(buzzer, OUTPUT);

  forward(2000);
  wobble(500, 50);
  forward(2000);
  wobble(500, 50);
  forward(2000);
  wobble(500, 50);
  
      attachInterrupt(left, leave, RISING);  // Interrupt attached to the button connected to pin 2
      attachInterrupt(right, leave, RISING);
}


void loop() {

  turnleft(500);
  turnrightB(1000);
  wobble(5000, 500);
  reverce(5000);
  turnright(7000);
  //  if (!digitalRead(left)) {
  //    reverce(500);
  //    wobble(500, 50);
  //    turnleftB(700);
  //    buzzing(200);
  //  }
  //  if (!digitalRead(right)) {
  //    wobble(500, 50);
  //    turnleftB(700);
  //    buzzing(500);
  //  }
  //  static unsigned int mic = 0;
  //
  //
  //  if (mic > LIMIT) {
  //    wobble(700, 70);
  //    turnleftB(1000);
  //  }
  //  mic = analogRead(MIC);
  }

  void leave() {
    reverce(500);
    wobble(500, 50);
    turnleftB(700);
    buzzing(200);
    
  }

  void wobble(int time, int amp) {
    int timed = 0;
    while (timed < time) {
      digitalWrite(MRb, LOW);
      digitalWrite(MLf, LOW);

      digitalWrite(MRf, HIGH);
      digitalWrite(MLb, HIGH);
      delay(amp);
      digitalWrite(MRf, LOW);
      digitalWrite(MLb, LOW);

      digitalWrite(MRb, HIGH);
      digitalWrite(MLf, HIGH);
      delay(amp);
      digitalWrite(MRb, LOW);
      digitalWrite(MLf, LOW);
      timed = timed + amp + amp;
    }
  }

  void forward(int time) {
    digitalWrite(MRb, LOW);
    digitalWrite(MLb, LOW);

    digitalWrite(MRf, HIGH);
    digitalWrite(MLf, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MRf, LOW);
      digitalWrite(MLf, LOW);
    }


  }

  void reverce(int time) {
    digitalWrite(MRf, LOW);
    digitalWrite(MLf, LOW);

    digitalWrite(MRb, HIGH);
    digitalWrite(MLb, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MRf, LOW);
      digitalWrite(MLf, LOW);
    }

  }

  void turnleft(int time) {
    digitalWrite(MRb, LOW);
    digitalWrite(MLb, LOW);
    digitalWrite(MLf, LOW);

    digitalWrite(MRf, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MRf, LOW);
    }
  }

  void turnright(int time) {
    digitalWrite(MRb, LOW);
    digitalWrite(MLb, LOW);
    digitalWrite(MRf, LOW);

    digitalWrite(MLf, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MLf, LOW);
    }
  }

  void turnleftB(int time) {
    digitalWrite(MRf, LOW);
    digitalWrite(MLb, LOW);
    digitalWrite(MLf, LOW);

    digitalWrite(MRb, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MRb, LOW);
    }
  }

  void turnrightB(int time) {
    digitalWrite(MRb, LOW);
    digitalWrite(MLf, LOW);
    digitalWrite(MRf, LOW);

    digitalWrite(MLb, HIGH);

    if (time != 0) {
      delay(time);
      digitalWrite(MLb, LOW);
    }
  }


  void buzzing(int freq) {
    tone(buzzer, freq);
    delay(750);
    noTone(buzzer);
  }



